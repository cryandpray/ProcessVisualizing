@{
    ViewData["Title"] = "Визуализация процессов";
}

@model ProcessVisualizing.Models.ProcessVisualizationModel

<div class="container-fluid">
    <!-- Заголовок и уведомления -->
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4">Визуализация процессов из XES-файлов</h1>

            @if (ViewBag.Message != null)
            {
                <div class="alert alert-success">@ViewBag.Message</div>
            }

            @if (ViewBag.Error != null)
            {
                <div class="alert alert-danger">@ViewBag.Error</div>
            }
        </div>
    </div>

    <!-- Основные элементы управления -->
    <div class="row mb-4">
        <!-- Панель загрузки нового файла -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5>Загрузить новый файл</h5>
                </div>
                <div class="card-body">
                    <form asp-action="UploadXes" method="post" enctype="multipart/form-data">
                        <div class="form-group">
                            <label>Выберите XES-файл:</label>
                            <input type="file" name="xesFile" class="form-control-file" accept=".xes,.xml" required />
                            <small class="form-text text-muted">Максимальный размер: 10MB</small>
                        </div>
                        <button type="submit" class="btn btn-success btn-block">Загрузить</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Панель выбора существующего файла -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5>Выбрать из загруженных</h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label>Доступные файлы:</label>
                        <select id="fileSelect" class="form-control">
                            <option value="">-- Выберите файл --</option>
                            @foreach (var file in Model.AvailableFiles)
                            {
                                <option value="@file.Value" selected="@(file.Value == Model.SelectedFileId?.ToString())">@file.Text</option>
                            }
                        </select>
                    </div>
                    <button id="showFileBtn" class="btn btn-primary btn-block">Показать</button>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-warning text-white">
                    <h5>Редактировать название файла</h5>
                </div>
                <div class="card-body">
                    <form asp-action="EditFileName" method="post">
                        <div class="form-group">
                            <label>Выберите файл:</label>
                            <select asp-for="EditFileId" class="form-control">
                                <option value="">-- Выберите файл --</option>
                                @foreach (var file in Model.AvailableFiles)
                                {
                                    <option value="@file.Value">@file.Text</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Новое название:</label>
                            <input asp-for="EditFileName" class="form-control" required />
                        </div>
                        <button type="submit" class="btn btn-warning btn-block">Изменить название</button>
                    </form>
                </div>
            </div>
        </div>

    <!-- Визуализация и детали -->
    @if (Model.ProcessTree != null)
    {
        <div class="row">
            <!-- Графическая визуализация -->
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header bg-secondary text-white">
                        <h5>Графическое представление</h5>
                    </div>
                    <div class="card-body">
                        <div id="processVisualization" style="height: 500px; border: 1px solid #eee; border-radius: 4px;"></div>
                    </div>
                </div>
            </div>

            <!-- Детали процесса -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header bg-secondary text-white">
                        <h5>Детали процесса</h5>
                    </div>
                    <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                        @if (Model.ProcessTree.Nodes.Any())
                        {
                            <ul class="list-group">
                                @foreach (var process in Model.ProcessTree.Nodes)
                                {
                                    <li class="list-group-item">
                                        <h6 class="font-weight-bold">@process.Name</h6>
                                        <ul class="pl-3">
                                            @foreach (var evt in process.Events)
                                            {
                                                <li>
                                                    <span class="badge badge-light">@evt.Timestamp.ToString("HH:mm:ss")</span>
                                                    @evt.Name
                                                </li>
                                            }
                                        </ul>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <div class="alert alert-info">Нет данных для отображения</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else if (Model.SelectedFileId.HasValue)
    {
        <div class="alert alert-info">Выбранный файл не содержит данных для визуализации</div>
    }
</div>



    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Инициализация Mermaid
                mermaid.initialize({
                    startOnLoad: false,
                    theme: 'default',
                    flowchart: {
                        useMaxWidth: true,
                        htmlLabels: true,
                        curve: 'basis'
                    }
                });

                // Обработчик для кнопки "Показать"
                document.getElementById('showFileBtn').addEventListener('click', function () {
                    var selectedFileId = document.getElementById('fileSelect').value;
                    if (selectedFileId) {
                        var url = '@Url.Action("Index", "Home")' + '?fileId=' + selectedFileId;
                        window.location.href = url;
                    }
                });

            @if (Model.ProcessTree != null && !string.IsNullOrEmpty(Model.ProcessTree.VisualizationData))
            {
                <text>
                        renderVisualization(@Html.Raw(Model.ProcessTree.VisualizationData));
                </text>
            }
                    });

            function renderVisualization(data) {
                if (!data || data.length === 0) {
                    document.getElementById('processVisualization').innerHTML =
                        '<div class="alert alert-info">Нет данных для визуализации</div>';
                    return;
                }

                let mermaidText = 'graph TD\n';
                let hasElements = false;

                data.forEach(process => {
                    if (process.children && process.children.length > 0) {
                        mermaidText += `    ${process.id}["${process.text}"]\n`;
                        process.children.forEach(event => {
                            mermaidText += `    ${event.id}["${event.text}"]\n`;
                            mermaidText += `    ${process.id} --> ${event.id}\n`;
                        });
                        hasElements = true;
                    }
                });

                if (hasElements) {
                    const container = document.getElementById('processVisualization');
                    container.innerHTML = '<div class="mermaid">' + mermaidText + '</div>';
                    mermaid.init(undefined, container.querySelector('.mermaid'));
                } else {
                    document.getElementById('processVisualization').innerHTML =
                        '<div class="alert alert-info">Нет связей для визуализации</div>';
                }
            }
        </script>
    }

<style>
    .mermaid {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 4px;
    }

    .card-header h5 {
        margin-bottom: 0;
    }

    .list-group-item {
        padding: 0.75rem 1.25rem;
    }

    .badge {
        font-size: 0.8em;
        margin-right: 5px;
    }

    .card-header.bg-warning {
        background-color: #ffc107 !important;
    }

    .btn-warning {
        color: #212529;
        background-color: #ffc107;
        border-color: #ffc107;
    }

    .btn-warning:hover {
        color: #212529;
        background-color: #e0a800;
        border-color: #d39e00;
    }

</style>

